class AdminHandler {
  constructor(bot, database, logger) {
    this.bot = bot;
    this.db = database;
    this.logger = logger;
    this.adminIds = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(Number) : [];
  }

  isAdmin(userId) {
    return this.adminIds.includes(userId);
  }

  async handleAdmin(msg) {
    const userId = msg.from.id;

    if (!this.isAdmin(userId)) {
      await this.bot.sendMessage(msg.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
      this.logger.warn(`Unauthorized admin access attempt: ${userId}`);
      return;
    }

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }],
        [{ text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin_users' }],
        [{ text: 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞', callback_data: 'admin_broadcast' }],
        [{ text: 'üìù –õ–æ–≥–∏', callback_data: 'admin_logs' }],
        [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'admin_settings' }]
      ]
    };

    await this.bot.sendMessage(msg.chat.id,
      'üõ† *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      { parse_mode: 'Markdown', reply_markup: keyboard }
    );

    await this.db.logUserAction(userId, 'admin_panel_accessed');
    this.logger.info(`Admin panel accessed by: ${userId}`);
  }

  async handleCallback(query) {
    const userId = query.from.id;
    const data = query.callback_data;

    if (!this.isAdmin(userId)) {
      await this.bot.answerCallbackQuery(query.id, { text: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
      return;
    }

    try {
      switch (data) {
      case 'admin_stats':
        await this.showStats(query);
        break;
      case 'admin_users':
        await this.showUsers(query, 1);
        break;
      case 'admin_broadcast':
        await this.handleBroadcast(query);
        break;
      case 'admin_logs':
        await this.showLogs(query, 1);
        break;
      case 'admin_settings':
        await this.showSettings(query);
        break;
      case 'admin_menu':
        await this.showAdminMenu(query);
        break;
      default:
        if (data.startsWith('admin_users_')) {
          const page = parseInt(data.split('_')[2]) || 1;
          await this.showUsers(query, page);
        } else if (data.startsWith('admin_logs_')) {
          const page = parseInt(data.split('_')[2]) || 1;
          await this.showLogs(query, page);
        }
        break;
      }
    } catch (error) {
      this.logger.error('Error in admin callback', { userId, data, error: error.message });
      await this.bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
    }
  }

  async showAdminMenu(query) {
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }],
        [{ text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin_users' }],
        [{ text: 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞', callback_data: 'admin_broadcast' }],
        [{ text: 'üìù –õ–æ–≥–∏', callback_data: 'admin_logs' }],
        [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'admin_settings' }]
      ]
    };

    await this.bot.editMessageText('üõ† *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      chat_id: query.message.chat.id,
      message_id: query.message.message_id,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  async showStats(query) {
    try {
      const stats = await this.db.getStats();

      const message = `
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}
üì± –° –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${stats.users_with_phone}
‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö: ${stats.subscribed_users}
üí∞ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${stats.registered_users}  
üè¶ –° –¥–µ–ø–æ–∑–∏—Ç–æ–º: ${stats.users_with_deposit}
üëë VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.vip_users}

üìà –°–µ–≥–æ–¥–Ω—è:
‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.today_new_users}
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: ${stats.today_registrations}
‚Ä¢ –î–µ–ø–æ–∑–∏—Ç–æ–≤: ${stats.today_deposits}

üíπ –ö–æ–Ω–≤–µ—Ä—Å–∏–∏:
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ ‚Üí –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${stats.subscription_to_registration}%
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Üí –î–µ–ø–æ–∑–∏—Ç: ${stats.registration_to_deposit}%
      `;

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_stats' }],
          [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
        ]
      };

      await this.bot.editMessageText(message, {
        chat_id: query.message.chat.id,
        message_id: query.message.message_id,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      this.logger.error('Error showing admin stats', error);
      throw error;
    }
  }

  async showUsers(query, page = 1) {
    try {
      const limit = 10;
      const offset = (page - 1) * limit;
      const users = await this.db.getUsers(limit, offset);
      const total = await this.db.getTotalUsers();
      const totalPages = Math.ceil(total / limit);

      let message = `üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å—Ç—Ä. ${page}/${totalPages})*\n\n`;

      users.forEach(user => {
        const status = user.vip_access ? 'üëë' : user.has_deposit ? 'üí∞' : user.is_registered ? 'üìù' : 'üë§';
        message += `${status} ${user.first_name || 'N/A'} (@${user.username || 'N/A'})\n`;
        message += `   ID: ${user.telegram_id}\n`;
        message += `   üì±: ${user.phone || '–ù–µ—Ç'}\n`;
        message += `   üìÖ: ${new Date(user.registration_date).toLocaleDateString()}\n\n`;
      });

      const keyboard = {
        inline_keyboard: [
          [
            { text: '‚¨ÖÔ∏è', callback_data: `admin_users_${Math.max(1, page - 1)}` },
            { text: `${page}/${totalPages}`, callback_data: 'noop' },
            { text: '‚û°Ô∏è', callback_data: `admin_users_${Math.min(totalPages, page + 1)}` }
          ],
          [{ text: '‚Üê –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω', callback_data: 'admin_menu' }]
        ]
      };

      await this.bot.editMessageText(message, {
        chat_id: query.message.chat.id,
        message_id: query.message.message_id,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      this.logger.error('Error showing users', error);
      throw error;
    }
  }

  async handleBroadcast(query) {
    // Placeholder for broadcast functionality
    const message = 'üì¢ *–†–∞—Å—Å—ã–ª–∫–∞*\n\n–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.';

    const keyboard = {
      inline_keyboard: [
        [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
      ]
    };

    await this.bot.editMessageText(message, {
      chat_id: query.message.chat.id,
      message_id: query.message.message_id,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  async showLogs(query, page = 1) {
    try {
      const limit = 20;
      const offset = (page - 1) * limit;
      const logs = await this.db.getRecentLogs(limit, offset);
      const total = await this.db.getTotalLogs();
      const totalPages = Math.ceil(total / limit);

      let message = `üìù *–õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å—Ç—Ä. ${page}/${totalPages})*\n\n`;

      logs.slice(0, 10).forEach(log => {  // Limit to 10 for readability
        const time = new Date(log.timestamp).toLocaleString('ru-RU');
        message += `üïí ${time}\n`;
        message += `üë§ ID: ${log.telegram_id}\n`;
        message += `‚ö°Ô∏è ${log.action}\n\n`;
      });

      const keyboard = {
        inline_keyboard: [
          [
            { text: '‚¨ÖÔ∏è', callback_data: `admin_logs_${Math.max(1, page - 1)}` },
            { text: `${page}/${totalPages}`, callback_data: 'noop' },
            { text: '‚û°Ô∏è', callback_data: `admin_logs_${Math.min(totalPages, page + 1)}` }
          ],
          [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_logs' }],
          [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
        ]
      };

      await this.bot.editMessageText(message, {
        chat_id: query.message.chat.id,
        message_id: query.message.message_id,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      this.logger.error('Error showing logs', error);
      throw error;
    }
  }

  async showSettings(query) {
    const message = `
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*

üì¢ –ö–∞–Ω–∞–ª: ${process.env.CHANNEL_USERNAME}
üëë VIP –∫–∞–Ω–∞–ª: ${process.env.VIP_CHANNEL_ID ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
üîó –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞ PO: ${process.env.POCKET_OPTION_LINK ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}
üë®‚Äçüíº –ê–¥–º–∏–Ω–æ–≤: ${this.adminIds.length}

üöÄ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: 1.0.0
üîß –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${process.env.NODE_ENV || 'development'}
    `;

    const keyboard = {
      inline_keyboard: [
        [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
      ]
    };

    await this.bot.editMessageText(message, {
      chat_id: query.message.chat.id,
      message_id: query.message.message_id,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  // Placeholder method for broadcast text handling
  async handleBroadcastText(msg) {
    // This will be implemented in later phases
    await this.bot.sendMessage(msg.chat.id, '–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.');
  }
}

module.exports = AdminHandler;
