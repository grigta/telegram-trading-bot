const translator = require('../localization/translations');

class SubscriptionChecker {
  constructor(bot, database, logger) {
    this.bot = bot;
    this.db = database;
    this.logger = logger;
    this.channelUsername = process.env.CHANNEL_USERNAME || '@your_channel';
  }

  async checkSubscription(userId, retryCount = 0) {
    const maxRetries = 3;
    const retryDelay = 1000; // 1 second

    try {
      const chatMember = await this.bot.getChatMember(this.channelUsername, userId);
      const validStatuses = ['member', 'administrator', 'creator'];
      const isSubscribed = validStatuses.includes(chatMember.status);

      this.logger.info(`Subscription check for ${userId}: ${isSubscribed ? 'subscribed' : 'not subscribed'}`, {
        userId,
        status: chatMember.status,
        channel: this.channelUsername
      });

      return isSubscribed;
    } catch (error) {
      this.logger.error('Subscription check error', {
        userId,
        channel: this.channelUsername,
        error: error.message,
        code: error.code,
        retry: retryCount
      });

      // Handle specific Telegram API errors
      if (error.code === 'ETELEGRAM') {
        const response = error.response;

        // Bot was blocked by user
        if (response && response.error_code === 403 && response.description.includes('bot was blocked')) {
          this.logger.warn(`Bot was blocked by user ${userId}`);
          return false;
        }

        // User not found in chat (likely not subscribed)
        if (response && response.error_code === 400 && response.description.includes('user not found')) {
          this.logger.info(`User ${userId} not found in channel (not subscribed)`);
          return false;
        }

        // Rate limit - retry after delay
        if (response && response.error_code === 429) {
          const retryAfter = response.parameters?.retry_after || 1;
          if (retryCount < maxRetries) {
            this.logger.warn(`Rate limited, retrying after ${retryAfter}s`, { userId, retryCount });
            await this.sleep(retryAfter * 1000);
            return await this.checkSubscription(userId, retryCount + 1);
          }
        }

        // Chat not found (wrong channel username)
        if (response && response.error_code === 400 && response.description.includes('chat not found')) {
          this.logger.error(`Channel not found: ${this.channelUsername}. Check CHANNEL_USERNAME in .env`);
          return false;
        }
      }

      // Retry on network errors
      if ((error.code === 'ECONNRESET' || error.code === 'ETIMEDOUT') && retryCount < maxRetries) {
        this.logger.warn(`Network error, retrying in ${retryDelay}ms`, { userId, retryCount });
        await this.sleep(retryDelay * Math.pow(2, retryCount)); // Exponential backoff
        return await this.checkSubscription(userId, retryCount + 1);
      }

      // Default: assume not subscribed on persistent errors
      return false;
    }
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async handleSubscriptionCheck(msg, lang = null) {
    const userId = msg.from.id;
    if (!lang) {
      lang = await this.db.getUserLanguage(userId);
    }

    try {
      const isSubscribed = await this.checkSubscription(userId);

      if (isSubscribed) {
        await this.db.updateUser(userId, { is_subscribed: true });
        await this.db.logUserAction(userId, 'subscription_confirmed');

        this.logger.info(`User subscription confirmed: ${userId}`);
        await this.requestContact(msg, lang);
      } else {
        await this.showSubscriptionPrompt(msg, lang);
      }
    } catch (error) {
      this.logger.error('Error in handleSubscriptionCheck', { userId, error: error.message });
      throw error;
    }
  }

  async handleSubscriptionCallback(query) {
    const userId = query.from.id;
    const data = query.callback_data;

    try {
      if (data === 'check_subscription') {
        await this.handleCheckSubscription(query);
      } else if (data === 'subscription_help') {
        await this.showSubscriptionHelp(query);
      }
    } catch (error) {
      this.logger.error('Error in handleSubscriptionCallback', { userId, data, error: error.message });
      await this.bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
    }
  }

  async handleCheckSubscription(query) {
    const userId = query.from.id;

    try {
      // Show loading message
      const lang = await this.db.getUserLanguage(userId);
      await this.bot.answerCallbackQuery(query.id, {
        text: lang === 'en' ? 'üîÑ Checking subscription...' : 'üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É...'
      });

      const isSubscribed = await this.checkSubscription(userId);

      if (isSubscribed) {
        await this.db.updateUser(userId, { is_subscribed: true });
        await this.db.logUserAction(userId, 'subscription_confirmed');

        this.logger.info(`User subscription confirmed via callback: ${userId}`);

        // Show success message
        const successMsg = lang === 'en'
          ? '‚úÖ *Great! Subscription confirmed!*\n\nNow share your phone number to receive personalized notifications.'
          : '‚úÖ *–û—Ç–ª–∏—á–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n–¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.';

        await this.bot.editMessageText(successMsg, {
          chat_id: query.message.chat.id,
          message_id: query.message.message_id,
          parse_mode: 'Markdown'
        });

        // Request contact after short delay
        setTimeout(async () => {
          await this.requestContact({ from: query.from, chat: query.message.chat });
        }, 1500);

      } else {
        const errorMsg = lang === 'en'
          ? '‚ùå Subscription not found. Make sure you subscribed to the channel and try again in a few seconds.'
          : '‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.';

        await this.bot.answerCallbackQuery(query.id, {
          text: errorMsg,
          show_alert: true
        });

        // Update button text to show retry
        const keyboard = {
          inline_keyboard: [
            [{
              text: lang === 'en' ? 'üì¢ Subscribe to channel' : 'üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª',
              url: `https://t.me/${this.channelUsername.substring(1)}`
            }],
            [{
              text: lang === 'en' ? 'üîÑ Check again' : 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑',
              callback_data: 'check_subscription'
            }],
            [{
              text: lang === 'en' ? '‚ùì Help with subscription' : '‚ùì –ü–æ–º–æ—â—å —Å –ø–æ–¥–ø–∏—Å–∫–æ–π',
              callback_data: 'subscription_help'
            }]
          ]
        };

        await this.bot.editMessageReplyMarkup(keyboard, {
          chat_id: query.message.chat.id,
          message_id: query.message.message_id
        });
      }
    } catch (error) {
      this.logger.error('Error checking subscription', { userId, error: error.message });
      await this.bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏' });
    }
  }

  async showSubscriptionHelp(query) {
    const userId = query.from.id;
    const lang = await this.db.getUserLanguage(userId);

    const helpMessage = lang === 'en' ? `
‚ùì *Help with subscription*

If you're having trouble subscribing:

1Ô∏è‚É£ *Make sure you clicked "Subscribe"* in the channel
2Ô∏è‚É£ *Wait 3-5 seconds* after subscribing
3Ô∏è‚É£ *Try clicking "Check again"*

üîß *If the problem persists:*
‚Ä¢ Leave the channel and subscribe again
‚Ä¢ Restart the bot with /start
‚Ä¢ Contact support: @${process.env.SUPPORT_USERNAME}

üí° *Important:* The bot can only verify subscription if the channel is public and the bot has admin rights.
    ` : `
‚ùì *–ü–æ–º–æ—â—å —Å –ø–æ–¥–ø–∏—Å–∫–æ–π*

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–ø–∏—Å–∫–æ–π:

1Ô∏è‚É£ *–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞–∂–∞–ª–∏ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"* –≤ –∫–∞–Ω–∞–ª–µ
2Ô∏è‚É£ *–ü–æ–¥–æ–∂–¥–∏—Ç–µ 3-5 —Å–µ–∫—É–Ω–¥* –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏
3Ô∏è‚É£ *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑"*

üîß *–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–∏–ª–∞—Å—å:*
‚Ä¢ –í—ã–π–¥–∏—Ç–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @${process.env.SUPPORT_USERNAME}

üí° *–í–∞–∂–Ω–æ:* –ë–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π –∏ —É –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ.
    `;

    await this.bot.sendMessage(query.message.chat.id, helpMessage, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: lang === 'en' ? 'üîÑ Try again' : 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'check_subscription' }],
          [{ text: lang === 'en' ? 'üí¨ Contact support' : 'üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π', url: `https://t.me/${process.env.SUPPORT_USERNAME}` }]
        ]
      }
    });

    await this.bot.answerCallbackQuery(query.id);
    await this.db.logUserAction(query.from.id, 'subscription_help_requested');
  }

  async showSubscriptionPrompt(msg, lang = 'ru') {
    const channelLink = `https://t.me/${this.channelUsername.substring(1)}`;

    const keyboard = {
      inline_keyboard: [
        [{
          text: lang === 'en' ? 'üì¢ Subscribe to the channel' : 'üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª',
          url: channelLink
        }],
        [{
          text: lang === 'en' ? "‚úÖ I've subscribed!" : '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!',
          callback_data: 'check_subscription'
        }],
        [{
          text: lang === 'en' ? '‚ùì Help with subscription' : '‚ùì –ü–æ–º–æ—â—å —Å –ø–æ–¥–ø–∏—Å–∫–æ–π',
          callback_data: 'subscription_help'
        }]
      ]
    };

    const message = lang === 'en' ? `
*Before we start, subscribe to my channel with key trading content:*

‚Ä¢ News-based trading signals
‚Ä¢ Free strategies and guides
‚Ä¢ Real results and case studies

*This step is required to access the bot.*

*How to subscribe:*
1. Click "üì¢ Subscribe to the channel"
2. Click "Subscribe" in the channel
3. Return here and click "‚úÖ I've subscribed!"
    ` : `
*–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª —Å –∫–ª—é—á–µ–≤—ã–º —Ç–æ—Ä–≥–æ–≤—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º:*

‚Ä¢ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –≥–∞–π–¥—ã
‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∫–µ–π—Å—ã

*–≠—Ç–æ—Ç —à–∞–≥ –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.*

*–ö–∞–∫ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:*
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª"
2. –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –∫–∞–Ω–∞–ª–µ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!"
    `;

    await this.bot.sendMessage(msg.chat.id, message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });

    await this.db.logUserAction(msg.from.id, 'subscription_prompt_shown', {
      channel: this.channelUsername,
      link: channelLink
    });

    this.logger.info(`Subscription prompt shown to user: ${msg.from.id}`);
  }

  async requestContact(msg, lang = 'ru') {
    // Check if user already has phone
    const existingUser = await this.db.getUserByTelegramId(msg.from.id);
    if (existingUser && existingUser.phone) {
      this.logger.info(`User ${msg.from.id} already has phone: ${existingUser.phone}`);
      // Skip contact request, go directly to main menu
      const MenuHandler = require('./menuHandler');
      const menuHandler = new MenuHandler(this.bot, this.db, this.logger);
      await menuHandler.showMainMenu(msg.chat.id, msg.from.id);
      return;
    }

    const keyboard = {
      keyboard: [
        [{ text: lang === 'en' ? 'üì± Share phone number' : 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact: true }]
      ],
      resize_keyboard: true,
      one_time_keyboard: true
    };

    const message = lang === 'en' ? `
üì± *Share your phone number*

üéØ This is necessary for:
‚Ä¢ üîî Personal trading signal notifications
‚Ä¢ üéÅ Exclusive bonuses and promotions
‚Ä¢ üÜò Quick support communication
‚Ä¢ üí∞ Notifications about new earning opportunities

üîê *Privacy guaranteed:*
‚Ä¢ Your number is used only for notifications
‚Ä¢ We don't share data with third parties
‚Ä¢ You can unsubscribe anytime

üëá Press the button below to continue
    ` : `
üì± *–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞*

üéØ –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è:
‚Ä¢ üîî –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
‚Ä¢ üéÅ –ü–æ–ª—É—á–µ–Ω–∏—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –∏ –∞–∫—Ü–∏–π
‚Ä¢ üÜò –ë—ã—Å—Ç—Ä–æ–π —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
‚Ä¢ üí∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–∞

üîê *–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞:*
‚Ä¢ –í–∞—à –Ω–æ–º–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç

üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    `;

    await this.bot.sendMessage(msg.chat.id, message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });

    await this.db.logUserAction(msg.from.id, 'contact_request_shown');
    this.logger.info(`Contact request shown to user: ${msg.from.id}`);
  }
}

module.exports = SubscriptionChecker;
